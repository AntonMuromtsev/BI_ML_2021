View(kernel_train_500)
length(name(kernel_train))
length(names(kernel_train))
model_3 <- lm(critical_temp ~ ., data = kernel_train_with_y_500)
kernel_train_with_y_500 <- select(kernel_train_with_y, V1:V500)
kernel_test <- as.data.frame(kernel_transformed[-kernel_train_test,])
kernel_test_500 <- select(kernel_test, V1:V500)
model_3 <- lm(critical_temp ~ ., data = kernel_train_with_y_500)
kernel_train_with_y_500 <- select(kernel_train_with_y, critical_temp:V500)
kernel_test <- as.data.frame(kernel_transformed[-kernel_train_test,])
kernel_test_500 <- select(kernel_test, V1:V500)
View(kernel_train_with_y_500)
model_3 <- lm(critical_temp ~ ., data = kernel_train_with_y_500)
kernel_train_y_pred <- predict(model_3, kernel_train)
kernel_train_y_pred <- as.data.frame(kernel_train_y_pred)
kernel_compare_train <- cbind(train_y, kernel_train_y_pred)
kernel_compare_train <- rename(kernel_compare_train, train_y = critical_temp) %>%
mutate(distance = (train_y - kernel_train_y_pred)^2, mean_distance = (train_y - mean(train_y))^2)
kernel_MSE_train <- (sum(kernel_compare_train$distance)/length(kernel_compare_train$distance))^0.5
kernel_MSE_train
PCA_MSE_train
kernel_RSS <- sum(kernel_compare_train$distance)
kernel_TSS <- sum(kernel_compare_train$mean_distance)
kernel_R_sq <- 1-(kernel_RSS/kernel_TSS)
kernel_R_sq
kernel_N <- length(kernel_train$V1)
kernel_p <- length(names(kernel_train))
kernel_R_sq_adj <- 1 - (1-kernel_R_sq)*(N-1)/(N-p-1)
kernel_R_sq_adj
kernel_test_y_pred <- predict(model_3, kernel_test)
kernel_test_y_pred <- as.data.frame(kernel_test_y_pred)
kernel_compare_test <- cbind(test_y, kernel_test_y_pred)
View(kernel_compare_test)
kernel_compare_test <- rename(kernel_compare_test, test_y = critical_temp) %>%
mutate(distance = (test_y - kernel_test_y_pred)^2, mean_distance = (test_y - mean(test_y))^2)
kernel_MSE_test <- (sum(kernel_compare_test$distance)/length(kernel_compare_test$distance))^0.5
kernel_MSE_test
kernel_train_y_pred <- predict(model_3, kernel_train_500)
kernel_train_y_pred <- as.data.frame(kernel_train_y_pred)
kernel_compare_train <- cbind(train_y, kernel_train_y_pred)
kernel_compare_train <- rename(kernel_compare_train, train_y = critical_temp) %>%
mutate(distance = (train_y - kernel_train_y_pred)^2, mean_distance = (train_y - mean(train_y))^2)
kernel_MSE_train <- (sum(kernel_compare_train$distance)/length(kernel_compare_train$distance))^0.5
kernel_MSE_train
kernel_RSS <- sum(kernel_compare_train$distance)
kernel_TSS <- sum(kernel_compare_train$mean_distance)
kernel_R_sq <- 1-(kernel_RSS/kernel_TSS)
kernel_R_sq
kernel_N <- length(kernel_train$V1)
kernel_p <- length(names(kernel_train))
kernel_R_sq_adj <- 1 - (1-kernel_R_sq)*(N-1)/(N-p-1)
kernel_R_sq_adj
kernel_test_y_pred <- predict(model_3, kernel_test_500)
kernel_test_y_pred <- as.data.frame(kernel_test_y_pred)
kernel_compare_test <- cbind(test_y, kernel_test_y_pred)
View(kernel_compare_test)
kernel_compare_test <- rename(kernel_compare_test, test_y = critical_temp) %>%
mutate(distance = (test_y - kernel_test_y_pred)^2, mean_distance = (test_y - mean(test_y))^2)
kernel_MSE_test <- (sum(kernel_compare_test$distance)/length(kernel_compare_test$distance))^0.5
kernel_MSE_test
library(dplyr)
library(caret)
library(car)
library(ggplot2)
library(kernlab)
library(RcppCNPy)
characteristics <-  read.csv("/Users/tugidon/Downloads/superconduct/train.csv")
elements <-  read.csv("/Users/tugidon/Downloads/superconduct/unique_m.csv")
elements <- select(elements, -material, - critical_temp)
frame <- cbind(characteristics, elements)
train_test = sort(sample(nrow(frame), nrow(frame)*.7))
train <- frame[train_test,]
test <- frame[-train_test,]
train_without_y <- select(train, -critical_temp)
train_y  <- select(train, critical_temp)
scaler <- preProcess(train_without_y)
train_without_y_scaled <- predict(scaler, train_without_y)
train_scaled <- cbind(train_y, train_without_y_scaled)
test_without_y <- select(test, -critical_temp)
test_y <- select(test, critical_temp)
test_without_y_scaled <- predict(scaler, test_without_y)
model <- lm(critical_temp ~ ., data = train_scaled)
summary(model)
train_y_pred <- predict(model, train_without_y_scaled)
train_y_pred <- as.data.frame(train_y_pred)
compare_train <- cbind(train_y, train_y_pred)
compare_train <- rename(compare_train, train_y = critical_temp) %>% mutate(distance = (train_y - train_y_pred)^2)
MSE_train <- (sum(compare_train$distance)/length(compare_train$distance))^0.5
MSE_train
test_y_pred <- predict(model, test_without_y_scaled)
test_y_pred <- as.data.frame(test_y_pred)
compare_test <- cbind(test_y, test_y_pred)
compare_test <- rename(compare_test, test_y = critical_temp) %>% mutate(distance = (test_y - test_y_pred)^2,
mean_distance = (test_y - mean(test_y))^2)
MSE_test <- (sum(compare_test$distance)/length(compare_test$distance))^0.5
MSE_test
RSS <- sum(compare_test$distance)
TSS <- sum(compare_test$mean_distance)
R_sq <- 1-(RSS/TSS)
R_sq
N <- length(test_without_y_scaled$number_of_elements)
p <- length(names(test_without_y_scaled))
R_sq_adj <- 1 - (1-R_sq)*(N-1)/(N-p-1)
R_sq_adj
pc <- prcomp(train_without_y_scaled)
summary(pc)
Proportion_variance <- as.data.frame(summary(pc)$importance[2,])
Cumulative_variance <- as.data.frame(summary(pc)$importance[3,])
Variance <- cbind(Proportion_variance, Cumulative_variance)
names(Variance) <- c("Proportion_variance", "Cumulative_variance")
Variance <- mutate(Variance, number = 1:length(Proportion_variance))
ggplot(Variance, aes(x = number, y = Proportion_variance))+
geom_col()
ggplot(Variance, aes(x = number, y = Cumulative_variance))+
geom_line()+
geom_line(aes(x = number,y=0.95))+
geom_line(aes(x = 77, y = Cumulative_variance))
PCA_train_without_y_scaled <- as.data.frame(predict(pc, train_without_y_scaled))
PCA_train_without_y_scaled_77 <- select(PCA_train_without_y_scaled,PC1:PC77 )
PCA_train_scaled <- cbind(train_y, PCA_train_without_y_scaled_77)
PCA_test_without_y_scaled <- as.data.frame(predict(pc, test_without_y_scaled))
PCA_test_without_y_scaled_77 <- select(PCA_test_without_y_scaled,PC1:PC77)
model_2 <- lm(critical_temp ~ ., data = PCA_train_scaled)
summary(model_2)
PCA_train_y_pred <- predict(model_2, PCA_train_without_y_scaled_77)
PCA_train_y_pred <- as.data.frame(PCA_train_y_pred)
PCA_compare_train <- cbind(train_y, PCA_train_y_pred)
PCA_compare_train <- rename(PCA_compare_train, train_y = critical_temp) %>%
mutate(distance = (train_y - PCA_train_y_pred)^2)
PCA_MSE_train <- (sum(PCA_compare_train$distance)/length(PCA_compare_train$distance))^0.5
PCA_MSE_train
PCA_test_y_pred <- predict(model_2, PCA_test_without_y_scaled_77)
PCA_test_y_pred <- as.data.frame(PCA_test_y_pred)
PCA_compare_test <- cbind(test_y, PCA_test_y_pred)
PCA_compare_test <- rename(PCA_compare_test, test_y = critical_temp) %>%
mutate(distance = (test_y - PCA_test_y_pred)^2,
mean_distance = (test_y - mean(test_y))^2)
PCA_MSE_test <- (sum(PCA_compare_test$distance)/length(PCA_compare_test$distance))^0.5
PCA_MSE_test
PCA_RSS <- sum(PCA_compare_test$distance)
PCA_TSS <- sum(PCA_compare_test$mean_distance)
PCA_R_sq <- 1-(PCA_RSS/PCA_TSS)
PCA_R_sq
N <- length(PCA_test_without_y_scaled_77$PC1)
p <- length(names(PCA_test_without_y_scaled_77))
PCA_R_sq_adj <- 1 - (1-PCA_R_sq)*(N-1)/(N-p-1)
PCA_R_sq_adj
kernal_pca <-kpca(~.,data=train_without_y_scaled,kernel="rbfdot",kpar=list(sigma=0.2),features=167)
kernal_pca@eig
a <- kernal_pca@eig
a <- as.data.frame(a)
a$a
sum(a$a)
library(dplyr)
library(caret)
library(car)
library(ggplot2)
library(kernlab)
library(RcppCNPy)
characteristics <-  read.csv("/Users/tugidon/Downloads/superconduct/train.csv")
elements <-  read.csv("/Users/tugidon/Downloads/superconduct/unique_m.csv")
elements <- select(elements, -material, - critical_temp)
frame <- cbind(characteristics, elements)
train_test = sort(sample(nrow(frame), nrow(frame)*.7))
train <- frame[train_test,]
test <- frame[-train_test,]
train_without_y <- select(train, -critical_temp)
train_y  <- select(train, critical_temp)
scaler <- preProcess(train_without_y)
train_without_y_scaled <- predict(scaler, train_without_y)
train_scaled <- cbind(train_y, train_without_y_scaled)
test_without_y <- select(test, -critical_temp)
test_y <- select(test, critical_temp)
test_without_y_scaled <- predict(scaler, test_without_y)
model <- lm(critical_temp ~ ., data = train_scaled)
summary(model)
train_y_pred <- predict(model, train_without_y_scaled)
train_y_pred <- as.data.frame(train_y_pred)
compare_train <- cbind(train_y, train_y_pred)
compare_train <- rename(compare_train, train_y = critical_temp) %>% mutate(distance = (train_y - train_y_pred)^2)
MSE_train <- (sum(compare_train$distance)/length(compare_train$distance))^0.5
MSE_train
test_y_pred <- predict(model, test_without_y_scaled)
test_y_pred <- as.data.frame(test_y_pred)
compare_test <- cbind(test_y, test_y_pred)
compare_test <- rename(compare_test, test_y = critical_temp) %>% mutate(distance = (test_y - test_y_pred)^2,
mean_distance = (test_y - mean(test_y))^2)
MSE_test <- (sum(compare_test$distance)/length(compare_test$distance))^0.5
MSE_test
RSS <- sum(compare_test$distance)
TSS <- sum(compare_test$mean_distance)
R_sq <- 1-(RSS/TSS)
R_sq
N <- length(test_without_y_scaled$number_of_elements)
p <- length(names(test_without_y_scaled))
R_sq_adj <- 1 - (1-R_sq)*(N-1)/(N-p-1)
R_sq_adj
pc <- prcomp(train_without_y_scaled)
summary(pc)
Proportion_variance <- as.data.frame(summary(pc)$importance[2,])
Cumulative_variance <- as.data.frame(summary(pc)$importance[3,])
Variance <- cbind(Proportion_variance, Cumulative_variance)
names(Variance) <- c("Proportion_variance", "Cumulative_variance")
Variance <- mutate(Variance, number = 1:length(Proportion_variance))
ggplot(Variance, aes(x = number, y = Proportion_variance))+
geom_col()
ggplot(Variance, aes(x = number, y = Cumulative_variance))+
geom_line()+
geom_line(aes(x = number,y=0.95))+
geom_line(aes(x = 77, y = Cumulative_variance))
PCA_train_without_y_scaled <- as.data.frame(predict(pc, train_without_y_scaled))
PCA_train_without_y_scaled_77 <- select(PCA_train_without_y_scaled,PC1:PC77 )
PCA_train_scaled <- cbind(train_y, PCA_train_without_y_scaled_77)
PCA_test_without_y_scaled <- as.data.frame(predict(pc, test_without_y_scaled))
PCA_test_without_y_scaled_77 <- select(PCA_test_without_y_scaled,PC1:PC77)
model_2 <- lm(critical_temp ~ ., data = PCA_train_scaled)
summary(model_2)
PCA_train_y_pred <- predict(model_2, PCA_train_without_y_scaled_77)
PCA_train_y_pred <- as.data.frame(PCA_train_y_pred)
PCA_compare_train <- cbind(train_y, PCA_train_y_pred)
PCA_compare_train <- rename(PCA_compare_train, train_y = critical_temp) %>%
mutate(distance = (train_y - PCA_train_y_pred)^2)
PCA_MSE_train <- (sum(PCA_compare_train$distance)/length(PCA_compare_train$distance))^0.5
PCA_MSE_train
PCA_test_y_pred <- predict(model_2, PCA_test_without_y_scaled_77)
PCA_test_y_pred <- as.data.frame(PCA_test_y_pred)
PCA_compare_test <- cbind(test_y, PCA_test_y_pred)
PCA_compare_test <- rename(PCA_compare_test, test_y = critical_temp) %>%
mutate(distance = (test_y - PCA_test_y_pred)^2,
mean_distance = (test_y - mean(test_y))^2)
PCA_MSE_test <- (sum(PCA_compare_test$distance)/length(PCA_compare_test$distance))^0.5
PCA_MSE_test
PCA_RSS <- sum(PCA_compare_test$distance)
PCA_TSS <- sum(PCA_compare_test$mean_distance)
PCA_R_sq <- 1-(PCA_RSS/PCA_TSS)
PCA_R_sq
N <- length(PCA_test_without_y_scaled_77$PC1)
p <- length(names(PCA_test_without_y_scaled_77))
PCA_R_sq_adj <- 1 - (1-PCA_R_sq)*(N-1)/(N-p-1)
PCA_R_sq_adj
kernel_transformed <- npyLoad("/Users/tugidon/Downloads/X_transform_kPCA.npy")
kernel_train_test = sort(sample(nrow(kernel_transformed), nrow(kernel_transformed)*.7))
kernel_train <- as.data.frame(kernel_transformed[kernel_train_test,])
kernel_train_500 <- select(kernel_train, V1:V500)
kernel_train_with_y <- cbind(train_y, kernel_train)
kernel_train_with_y_500 <- select(kernel_train_with_y, critical_temp:V500)
kernel_test <- as.data.frame(kernel_transformed[-kernel_train_test,])
kernel_test_500 <- select(kernel_test, V1:V500)
names(kernel_train)
kernel_train$V12567
kernel_train_test = sort(sample(nrow(kernel_transformed), nrow(kernel_transformed)*.7))
kernel_train <- as.data.frame(kernel_transformed[kernel_train_test,])
kernel_train_5000 <- select(kernel_train, V1:V5000)
kernel_train_with_y <- cbind(train_y, kernel_train)
kernel_train_with_y_5000 <- select(kernel_train_with_y, critical_temp:V5000)
kernel_test <- as.data.frame(kernel_transformed[-kernel_train_test,])
kernel_test_5000 <- select(kernel_test, V1:V5000)
model_3 <- lm(critical_temp ~ ., data = kernel_train_with_y_5000)
kernel_train_y_pred <- predict(model_3, kernel_train_500)
kernel_train_y_pred <- as.data.frame(kernel_train_y_pred)
kernel_compare_train <- cbind(train_y, kernel_train_y_pred)
kernel_train_y_pred <- predict(model_3, kernel_train_500)
kernel_train_y_pred <- predict(model_3, kernel_train_1000)
kernel_train_y_pred <- predict(model_3, kernel_train_5000)
kernel_train_y_pred <- as.data.frame(kernel_train_y_pred)
kernel_compare_train <- cbind(train_y, kernel_train_y_pred)
kernel_compare_train <- rename(kernel_compare_train, train_y = critical_temp) %>%
mutate(distance = (train_y - kernel_train_y_pred)^2, mean_distance = (train_y - mean(train_y))^2)
kernel_MSE_train <- (sum(kernel_compare_train$distance)/length(kernel_compare_train$distance))^0.5
kernel_MSE_train
kernel_RSS <- sum(kernel_compare_train$distance)
kernel_TSS <- sum(kernel_compare_train$mean_distance)
kernel_R_sq <- 1-(kernel_RSS/kernel_TSS)
kernel_R_sq
kernel_N <- length(kernel_train$V1)
kernel_p <- length(names(kernel_train))
kernel_R_sq_adj <- 1 - (1-kernel_R_sq)*(N-1)/(N-p-1)
kernel_R_sq_adj
kernel_train_10000 <- select(kernel_train, V1:V10000)
kernel_train_with_y <- cbind(train_y, kernel_train)
kernel_train_with_y_10000 <- select(kernel_train_with_y, critical_temp:V10000)
kernel_test <- as.data.frame(kernel_transformed[-kernel_train_test,])
kernel_test_10000 <- select(kernel_test, V1:V10000)
model_3 <- lm(critical_temp ~ ., data = kernel_train_with_y_10000)
kernel_train_y_pred <- predict(model_3, kernel_train_10000)
kernel_train_y_pred <- as.data.frame(kernel_train_y_pred)
kernel_compare_train <- cbind(train_y, kernel_train_y_pred)
kernel_compare_train <- rename(kernel_compare_train, train_y = critical_temp) %>%
mutate(distance = (train_y - kernel_train_y_pred)^2, mean_distance = (train_y - mean(train_y))^2)
kernel_MSE_train <- (sum(kernel_compare_train$distance)/length(kernel_compare_train$distance))^0.5
kernel_MSE_train
kernel_RSS <- sum(kernel_compare_train$distance)
kernel_TSS <- sum(kernel_compare_train$mean_distance)
kernel_R_sq <- 1-(kernel_RSS/kernel_TSS)
kernel_R_sq
kernel_N <- length(kernel_train$V1)
kernel_p <- length(names(kernel_train))
kernel_R_sq_adj <- 1 - (1-kernel_R_sq)*(N-1)/(N-p-1)
kernel_R_sq_adj
kernel_test_y_pred <- predict(model_3, kernel_test_10000)
kernel_test_y_pred <- as.data.frame(kernel_test_y_pred)
kernel_compare_test <- cbind(test_y, kernel_test_y_pred)
kernel_compare_test <- rename(kernel_compare_test, test_y = critical_temp) %>%
mutate(distance = (test_y - kernel_test_y_pred)^2, mean_distance = (test_y - mean(test_y))^2)
kernel_MSE_test <- (sum(kernel_compare_test$distance)/length(kernel_compare_test$distance))^0.5
kernel_MSE_test
kernel_MSE_train
kernel_RSS_test <- sum(kernel_compare_test$distance)
kernel_TSS_test <- sum(kernel_compare_test$mean_distance)
kernel_R_sq_test <- 1-(kernel_RSS_test/kernel_TSS_test)
kernel_R_sq_test
kernel_RSS_test <- sum(kernel_compare_test$distance)
kernel_TSS_test <- sum(kernel_compare_test$mean_distance)
kernel_R_sq_test <- 1-(kernel_RSS_test/kernel_TSS_test)
kernel_R_sq_test
kernel_test_y_pred <- predict(model_3, kernel_test_10000)
kernel_test_y_pred <- as.data.frame(kernel_test_y_pred)
kernel_compare_test <- cbind(test_y, kernel_test_y_pred)
kernel_compare_test <- rename(kernel_compare_test, test_y = critical_temp) %>%
mutate(distance = (test_y - kernel_test_y_pred)^2, mean_distance = (test_y - mean(test_y))^2)
kernel_MSE_test <- (sum(kernel_compare_test$distance)/length(kernel_compare_test$distance))^0.5
kernel_MSE_test
kernel_RSS_test <- sum(kernel_compare_test$distance)
kernel_TSS_test <- sum(kernel_compare_test$mean_distance)
kernel_R_sq_test <- 1-(kernel_RSS_test/kernel_TSS_test)
kernel_R_sq_test
kernel_compare_test$distance
kernel_compare_test$mean_distance
kernel_MSE_test
kernel_N <- length(kernel_test$V1)
kernel_p <- length(names(kernel_test))
kernel_R_sq_adj <- 1 - (1-kernel_R_sq_test)*(N-1)/(N-p-1)
kernel_R_sq_adj
kernel_RSS_test <- sum(kernel_compare_test$distance)
kernel_TSS_test <- sum(kernel_compare_test$mean_distance)
kernel_R_sq_test <- 1-(kernel_RSS_test/kernel_TSS_test)
kernel_R_sq_test
kernel_MSE_test <- (sum(kernel_compare_test$distance)/length(kernel_compare_test$distance))^0.5
kernel_MSE_test
kernel_train_8000 <- select(kernel_train, V1:V8000)
kernel_train_with_y <- cbind(train_y, kernel_train)
kernel_train_with_y_8000 <- select(kernel_train_with_y, critical_temp:V8000)
kernel_test <- as.data.frame(kernel_transformed[-kernel_train_test,])
kernel_test_8000 <- select(kernel_test, V1:V8000)
model_3 <- lm(critical_temp ~ ., data = kernel_train_with_y_8000)
kernel_train_y_pred <- predict(model_3, kernel_train_10000)
kernel_train_y_pred <- as.data.frame(kernel_train_y_pred)
kernel_compare_train <- cbind(train_y, kernel_train_y_pred)
kernel_compare_train <- rename(kernel_compare_train, train_y = critical_temp) %>%
mutate(distance = (train_y - kernel_train_y_pred)^2, mean_distance = (train_y - mean(train_y))^2)
kernel_MSE_train <- (sum(kernel_compare_train$distance)/length(kernel_compare_train$distance))^0.5
kernel_MSE_train
kernel_RSS <- sum(kernel_compare_train$distance)
kernel_TSS <- sum(kernel_compare_train$mean_distance)
kernel_R_sq <- 1-(kernel_RSS/kernel_TSS)
kernel_R_sq
kernel_train_test = sort(sample(nrow(kernel_transformed), nrow(kernel_transformed)*.7))
kernel_train <- as.data.frame(kernel_transformed[kernel_train_test,])
kernel_train_12000 <- select(kernel_train, V1:V12000)
kernel_train_with_y <- cbind(train_y, kernel_train)
kernel_train_with_y_12000 <- select(kernel_train_with_y, critical_temp:V12000)
kernel_test <- as.data.frame(kernel_transformed[-kernel_train_test,])
kernel_test_12000 <- select(kernel_test, V1:V12000)
model_3 <- lm(critical_temp ~ ., data = kernel_train_with_y_8000)
model_3 <- lm(critical_temp ~ ., data = kernel_train_with_y_12000)
library(dplyr)
library(caret)
library(car)
library(ggplot2)
library(kernlab)
library(RcppCNPy)
characteristics <-  read.csv("/Users/tugidon/Downloads/superconduct/train.csv")
elements <-  read.csv("/Users/tugidon/Downloads/superconduct/unique_m.csv")
elements <- select(elements, -material, - critical_temp)
frame <- cbind(characteristics, elements)
train_test = sort(sample(nrow(frame), nrow(frame)*.7))
train <- frame[train_test,]
test <- frame[-train_test,]
train_without_y <- select(train, -critical_temp)
train_y  <- select(train, critical_temp)
scaler <- preProcess(train_without_y)
train_without_y_scaled <- predict(scaler, train_without_y)
train_scaled <- cbind(train_y, train_without_y_scaled)
test_without_y <- select(test, -critical_temp)
test_y <- select(test, critical_temp)
test_without_y_scaled <- predict(scaler, test_without_y)
model <- lm(critical_temp ~ ., data = train_scaled)
summary(model)
train_y_pred <- predict(model, train_without_y_scaled)
train_y_pred <- as.data.frame(train_y_pred)
compare_train <- cbind(train_y, train_y_pred)
compare_train <- rename(compare_train, train_y = critical_temp) %>% mutate(distance = (train_y - train_y_pred)^2)
MSE_train <- (sum(compare_train$distance)/length(compare_train$distance))^0.5
MSE_train
T# Calculating MSE for test
test_y_pred <- predict(model, test_without_y_scaled)
test_y_pred <- as.data.frame(test_y_pred)
compare_test <- cbind(test_y, test_y_pred)
compare_test <- rename(compare_test, test_y = critical_temp) %>% mutate(distance = (test_y - test_y_pred)^2,
mean_distance = (test_y - mean(test_y))^2)
MSE_test <- (sum(compare_test$distance)/length(compare_test$distance))^0.5
MSE_test
RSS <- sum(compare_test$distance)
TSS <- sum(compare_test$mean_distance)
R_sq <- 1-(RSS/TSS)
R_sq
model <- lm(critical_temp ~ ., data = train_scaled)
summary(model)
train_y_pred <- predict(model, train_without_y_scaled)
train_y_pred <- as.data.frame(train_y_pred)
compare_train <- cbind(train_y, train_y_pred)
compare_train <- rename(compare_train, train_y = critical_temp) %>% mutate(distance = (train_y - train_y_pred)^2)
MSE_train <- (sum(compare_train$distance)/length(compare_train$distance))^0.5
MSE_train
model <- lm(critical_temp ~ ., data = train_scaled)
summary(model)
train_RSS <- sum(compare_train$distance)
train_TSS <- sum(compare_train$mean_distance)
train_R_sq <- 1-(train_RSS/train_TSS)
train_R_sq
train_y_pred <- predict(model, train_without_y_scaled)
train_y_pred <- as.data.frame(train_y_pred)
compare_train <- cbind(train_y, train_y_pred)
compare_train <- rename(compare_train, train_y = critical_temp) %>% mutate(distance = (train_y - train_y_pred)^2)
MSE_train <- (sum(compare_train$distance)/length(compare_train$distance))^0.5
MSE_train
train_RSS <- sum(compare_train$distance)
train_TSS <- sum(compare_train$mean_distance)
train_R_sq <- 1-(train_RSS/train_TSS)
train_R_sq
train_RSS <- sum(compare_train$distance)
train_RSS
train_TSS
train_TSS <- sum(compare_train$mean_distance)
train_TSS
train_y_pred <- predict(model, train_without_y_scaled)
train_y_pred <- as.data.frame(train_y_pred)
compare_train <- cbind(train_y, train_y_pred)
compare_train <- rename(compare_train, train_y = critical_temp) %>% mutate(distance = (train_y - train_y_pred)^2,
mean_distance = (train_y - mean(train_y))^2)
MSE_train <- (sum(compare_train$distance)/length(compare_train$distance))^0.5
MSE_train
train_RSS <- sum(compare_train$distance)
train_RSS
train_TSS <- sum(compare_train$mean_distance)
train_TSS
train_R_sq <- 1-(train_RSS/train_TSS)
train_R_sq
N <- length(test_without_y_scaled$number_of_elements)
p <- length(names(test_without_y_scaled))
train_R_sq_adj <- 1 - (1-train_R_sq)*(N-1)/(N-p-1)
train_R_sq_adj
MSE_train
MSE_train
MSE_train
sum(compare_train$distance)
#sum(compare_train$distance)
sum(train_y$critical_temp)
train_y_pred <- predict(model, train_without_y_scaled)
train_y_pred <- as.data.frame(train_y_pred)
compare_train <- cbind(train_y, train_y_pred)
train_y_pred <- predict(model, train_without_y_scaled)
train_y_pred <- as.data.frame(train_y_pred)
compare_train <- cbind(train_y, train_y_pred)
compare_train <- rename(compare_train, train_y = critical_temp) %>% mutate(distance = (train_y - train_y_pred)^2,
mean_distance = (train_y - mean(train_y))^2)
sum(train_y$critical_temp)
MSE_train <- (sum(compare_train$distance)/length(compare_train$distance))^0.5
MSE_train
train_RSS <- sum(compare_train$distance)
train_RSS
train_TSS <- sum(compare_train$mean_distance)
train_TSS
train_R_sq <- 1-(train_RSS/train_TSS)
train_R_sq
N <- length(test_without_y_scaled$number_of_elements)
p <- length(names(test_without_y_scaled))
train_R_sq_adj <- 1 - (1-train_R_sq)*(N-1)/(N-p-1)
train_R_sq_adj
test_y_pred <- predict(model, test_without_y_scaled)
test_y_pred <- as.data.frame(test_y_pred)
compare_test <- cbind(test_y, test_y_pred)
compare_test <- rename(compare_test, test_y = critical_temp) %>% mutate(distance = (test_y - test_y_pred)^2,
mean_distance = (test_y - mean(test_y))^2)
MSE_test <- (sum(compare_test$distance)/length(compare_test$distance))^0.5
MSE_test
RSS <- sum(compare_test$distance)
TSS <- sum(compare_test$mean_distance)
R_sq <- 1-(RSS/TSS)
R_sq
N <- length(test_without_y_scaled$number_of_elements)
p <- length(names(test_without_y_scaled))
R_sq_adj <- 1 - (1-R_sq)*(N-1)/(N-p-1)
R_sq_adj
length(test$number_of_elements)
length(traint$number_of_elements)
length(train$number_of_elements)
a <- read.csv("/Users/tugidon/Downloads/=?utf-8?B?0JHQsNC30LAg0LTQsNC90L3Ri9GFINC40LzQtdC9INC4INGE0LDQvNC40LvQuNC5INCyINGE0L7RgNC80LDRgtC1IENTVi56aXA=?=/russian_names.csv")
View(a)
install.packages("ape")
BiocManager::install("ggtree")
getRversion()
install.packages("installr")
4 +4
heart <- read.csv("Desktop/ansamble/heart.csv")
View(heart)
heart <- read.csv("Desktop/ansamble/heart.csv")
View(heart)
?write.csv()
?write.csv(heart, file = "heart_R.csv")
setwd("Desktop/ansamble/")
write.csv(heart, file = "heart_R.csv")
